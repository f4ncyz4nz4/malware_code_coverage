from capstone import *
import re

def pin_trace_gen(base_address):
    bbl_string = open('testMemoryDump-7916.bbl').read()
    bbl_list = re.findall('.{1,8}', bbl_string)
    with open('pin_trace.txt', 'w') as f:
        for addr in bbl_list:
            real_address = int(addr, 16) - base_address
            if real_address < 0:
                continue
            formatted__address = "0x{:08X}".format(real_address)
            f.write(formatted__address[2:] + '\n')

pin_trace_gen(0x0)
md = Cs(CS_ARCH_X86, CS_MODE_32)

pin_t = []
with open('pin_trace.txt', 'r') as pt:
    for line in pt:
        pin_t.append(line[:-1])

with open('memory_dump.txt', 'r') as dmp:
    for addr in pin_t:
        addr = int(addr,16)

        offset = addr%0x10
        base = (addr - offset)/0x10
        pt = (base*58)+10+(3*offset)
        
        dmp.seek(pt)
        instructions_1 = dmp.readline()
        instructions_2 = dmp.readline()
        instructions_3 = dmp.readline()
        instructions = instructions_1[:-1] + " " + instructions_2[10:-1] + " " + instructions_3[10:-1]
        #print("\n"+instructions)

        code = bytearray.fromhex(instructions)
        #print(code)

        for i in md.disasm(bytes(code), addr):
            print("0x%x:\t%s\t%s" %(i.address, i.mnemonic, i.op_str))
            break