from minidump import minidumpfile, minidumpreader
from capstone import *
import re


def trace_gen():
    base_address = 0xef1790-0x2ec88bd
    bbl_string = open('./testMemoryDump-7916.bbl').read()
    bbl_list = re.findall('.{1,8}', bbl_string)
    with open('pin_trace.txt', 'w') as f:
        for addr in bbl_list:
            real_address = int(addr, 16) - base_address
            if real_address < 0:
                continue
            formatted__address = "0x{:08X}".format(real_address)
            f.write(formatted__address[2:] + '\n')


def read(va):
    return minidump_reader.read(va, 0x400)


def disasembly(code, va):
    for i in md.disasm(code, va):
        print("0x%x:\t%s\t%s" % (i.address, i.mnemonic, i.op_str))
        break


md = Cs(CS_ARCH_X86, CS_MODE_32)
minidump_file = minidumpfile.MinidumpFile.parse(
    "./bho/coverage/1d713ad7ee3a43432d6188707943ee9ef07241bbc7bda376a068989d7a248143.dat-7700.dmp")
minidump_reader = minidump_file.get_reader()

# trace_gen()
pin_t = []
with open('pin_trace.txt', 'r') as pt:
    for line in pt:
        pin_t.append(int(line[:-1], 16))

# for addr in pin_t:
#    code = read(addr)
#    disasembly(code, addr)

a = 0x00401070
code = read(a)
for i in md.disasm(code, a):
    print("0x%x:\t%s\t%s" % (i.address, i.mnemonic, i.op_str))
