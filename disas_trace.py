from minidump import minidumpfile
from capstone import *
import re


def check_ret(inst):
    if inst.mnemonic == "ret":
        return True
    return False


def check_null(code):
    if code[:7] == b'\x00\x00\x00\x00\x00\x00\x00':
        return True
    return False


def check_ind_jump(inst_set, level):
    """mov	eax, 0x405030 jmp	eax

    Args:
        i (_type_): instruction from md.disasm

    Returns:
        Bool: True if there is an indirect jump, False otherwise
    """
    i = next(inst_set)
    if i.mnemonic == "mov" and re.match(r'..., 0x.{1,8}', i.op_str):
        print(i.op_str[:3])
        j = next(inst_set)
        # if j.mnemonic == "jmp":
        #    explore_function(int(i.op_str[5:], 16), level+1)


def check_call(inst, level):
    """mov	eax, 0x405030 jmp	eax

    Args:
        i (_type_): instruction from md.disasm

    Returns:
        Bool: True if there is an indirect jump, False otherwise
    """
    if inst.mnemonic == "call" and re.match(r'0x.{1,8}', inst.op_str):
        explore_function(int(inst.op_str, 16), level+1)


def explore_function(va, level=1):
    print("\n---------- sub_%s ----------" % hex(va)[2:])
    tabs = "\t" * level
    code = minidump_reader.read(va, 0x30)
    inst_set = md.disasm(code, va)
    for inst in inst_set:
        if check_null(code) or check_ret(inst):
            break
        print(f"{tabs}0x{inst.address}:\t{inst.mnemonic}\t{inst.op_str}")
        check_call(inst, level)
        # check_ind_jump(md.disasm(code, va), level)
        va += inst.size
    print("------------ end ------------\n")


md = Cs(CS_ARCH_X86, CS_MODE_32)
minidump_file = minidumpfile.MinidumpFile.parse(
    "./1d713ad7ee3a43432d6188707943ee9ef07241bbc7bda376a068989d7a248143.dmp")
minidump_reader = minidump_file.get_reader()

bbl_string = open(
    './1d713ad7ee3a43432d6188707943ee9ef07241bbc7bda376a068989d7a248143.bbl').read()
bbl_list = re.findall('.{1,8}', bbl_string)

print("### START ###")
for bbl in bbl_list:
    va = int(bbl, 16)
    if va > 0:
        code = minidump_reader.read(va, 0x20)
        i = next(md.disasm(code, va))
        print("->0x%x:\t%s\t%s" % (i.address, i.mnemonic, i.op_str))
        check_call(i, 1)
print("### END ###")
