from minidump import minidumpfile, minidumpreader
from capstone import *
import re


def explore_function(va, level=1):
    print("\n---------- sub_%s ----------" % hex(va)[2:])
    first_it = True
    tabs = "\t" * level
    while first_it or i.mnemonic != "ret":
        code = minidump_reader.read(va, 0x20)
        if code[:7] == b'\x00\x00\x00\x00\x00\x00\x00':
            break
        for i in md.disasm(code, va):
            print(f"{tabs}0x{i.address}:\t{i.mnemonic}\t{i.op_str}")
            if i.mnemonic == "call" and re.match(r'0x.{1,8}', i.op_str):
                explore_function(int(i.op_str, 16), level+1)
            break
        va += i.size
        if first_it:
            first_it = False
    print("------------ end ------------\n")
    return


md = Cs(CS_ARCH_X86, CS_MODE_32)
minidump_file = minidumpfile.MinidumpFile.parse(
    "./1d713ad7ee3a43432d6188707943ee9ef07241bbc7bda376a068989d7a248143.dmp")
minidump_reader = minidump_file.get_reader()

bbl_string = open(
    './1d713ad7ee3a43432d6188707943ee9ef07241bbc7bda376a068989d7a248143.bbl').read()
bbl_list = re.findall('.{1,8}', bbl_string)

print("### START ###")
for bbl in bbl_list:
    va = int(bbl, 16)
    if va > 0:
        code = minidump_reader.read(va, 0x20)
        for i in md.disasm(code, va):
            print("0x%x:\t%s\t%s" % (i.address, i.mnemonic, i.op_str))
            if i.mnemonic == "call" and re.match(r'0x.{1,8}', i.op_str):
                explore_function(int(i.op_str, 16))
            break
print("### END ###")
