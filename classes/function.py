import networkx as nx


class Function:
    def __init__(self, name, addr_range):
        self.name = name
        self.bb_exe = 0
        self.bb_tot = 0
        self.api_exe = 0
        self.api_tot = 0
        self.addr_range = addr_range
        self.api_not_executed = []
        self.graph = nx.Graph()
        # Set for executed bbs
        self.bb = set()
        self.bb_exe = set()
        self.edge_exe = 0
        self.edge_tot = 0
        self.edge_cov = None

    def __dict__(self):
        return {
            "name": self.name,
            "bb_exe": self.bb_exe,
            "bb_tot": self.bb_tot,
            "bb_cov": (self.bb_exe / self.bb_tot) * 100 if self.bb_exe > 0 and self.bb_tot > 0 else None,
            "api_exe": self.api_exe,
            "api_tot": self.api_tot,
            "api_cov": (self.api_exe / self.api_tot) * 100 if self.api_exe > 0 and self.api_tot > 0 else None,
            "api_not_exe": self.api_not_executed,
            "edge_exe": self.edge_exe,
            "edge_tot": self.edge_tot,
            "edge_cov": self.edge_cov
        }
