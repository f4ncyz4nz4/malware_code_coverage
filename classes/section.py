from classes.function import Function


class Section:
    def __init__(self, name, sample, start, size, exe, sha256):
        self.name = name
        self.sample = sample
        self.start = start
        self.size = size
        self.end = start+size
        self.executable_flag = exe
        self.sha256 = sha256
        self.disass = 0.0
        self.bbs = 0
        self.coverage = 0.0
        self.not_seen = []
        self.not_seen_set = set()
        self.functions = {}

    def __str__(self):
        return f"Section: {self.name}\nStart: {hex(self.start)}\nSize: {hex(self.size)}\nEnd: {hex(self.end)}\nExecutable: {self.executable_flag}\n\nDisassembly ratio: {self.disass:.4f}\nCoverage: {self.coverage:.4f}\nBBs executed but not found: {self.not_seen}\n\n"

    def __dict__(self):
        return {
            "name": self.name,
            "start": hex(self.start),
            "size": hex(self.size),
            "end": hex(self.end),
            "executable": self.executable_flag,
            "sha256": self.sha256,
            "disassembly_ratio": self.disass,
            "coverage": self.coverage,
            "bbs_not_executed": self.not_seen,
            "functions": list(self.functions.values())
        }

    def functions_dict(self):
        # Create function dictionary
        if self.executable_flag:
            for addr in self.sample.addr_to_visit:
                if self.contains(addr):
                    addr = toAddr(addr)
                    func = getFunctionContaining(addr)
                    if func == None:
                        func = createFunction(addr, "FUN_"+addr.toString())
                    if func != None:
                        self.functions[func.toString()] = Function(
                            func.toString(), func.getBody())

    def contains(self, address):
        if address >= self.start and address <= self.end:
            return True
        return False
