import re
from capstone import *
from minidump import minidumpfile

addr = toAddr(0x401070)

resetAllAnalysisOptions(currentProgram)
setAnalysisOption(currentProgram, "PDB Universal", "false")
setAnalysisOption(currentProgram, "Subroutine References", "false")
setAnalysisOption(currentProgram, "Function Start Search", "false")
setAnalysisOption(currentProgram, "x86 Constant Reference Analyzer", "false")
setAnalysisOption(
    currentProgram, "Data Reference.Subroutine References", "false")
setAnalysisOption(currentProgram, "Reference.Subroutine References", "false")
setAnalysisOption(
    currentProgram, "Subroutine References.Create Thunks Early", "false")
setAnalysisOption(currentProgram, "Decompiler Switch Analysis", "false")
setAnalysisOption(currentProgram, "Function Start Search After Data", "false")
setAnalysisOption(currentProgram, "Create Address Tables", "false")

addEntryPoint(addr)

'''
md = Cs(CS_ARCH_X86, CS_MODE_32)
minidump_file = minidumpfile.MinidumpFile.parse(
    "./1d713ad7ee3a43432d6188707943ee9ef07241bbc7bda376a068989d7a248143.dmp")
minidump_reader = minidump_file.get_reader()
bbl_string = open(
    './1d713ad7ee3a43432d6188707943ee9ef07241bbc7bda376a068989d7a248143.bbl').read()
bbl_list = re.findall('.{1,8}', bbl_string)

for bbl in bbl_list:
    va = int(bbl, 16)
    if va > 0:
        code = minidump_reader.read(va, 0x20)
        instruction = next(md.disasm(code, va))
        if instruction.mnemonic == "call" and re.match(r'0x.{1,8}', instruction.op_str):
            addEntryPoint(toAddr(instruction.op_str))
'''
