import subprocess
from minidump import minidumpfile
import sys
import os
import shutil


def reset(proj):
    # Delete folders or files
    items = os.listdir(".")
    for item in items:
        if item.startswith(proj):
            if os.path.isdir(item):
                shutil.rmtree(item)
            else:
                os.remove(item)


def coverage(filename):
    proj_name = "CodeCoverage"
    # Check if GHIDRA_INSTALL_DIR env var exists
    ghidra_dir = os.getenv("GHIDRA_INSTALL_DIR")
    if ghidra_dir == None:
        print("GHIDRA_INSTALL_DIR doesn't exists")
        sys.exit(1)
    if ghidra_dir[-1] != "\\":
        ghidra_dir = ghidra_dir + "\\"
    # Create outputs/ folder for results
    if not os.path.exists("outputs/"):
        os.makedirs("outputs/")

    # Eventally get the absolute path
    filename = os.path.abspath(os.path.join(os.getcwd(), filename))

    # Parse the minidump in order to retrieve its parameters
    minidump_file = minidumpfile.MinidumpFile.parse(filename)
    if minidump_file.modules == None:
        with open("outputs/" + os.path.splitext(os.path.basename(filename))[0] + ".error", 'w') as error_file:
            error_file.write(f"Minidump with no modules")
        return
    mod_baseaddress = minidump_file.modules.modules[0].baseaddress
    mod_size = minidump_file.modules.modules[0].size

    segs = [seg for seg in minidump_file.memory_segments.memory_segments if seg.start_virtual_address >=
            mod_baseaddress and seg.end_virtual_address <= mod_baseaddress + mod_size]
    if len(segs) <= 0:
        with open("outputs/" + os.path.splitext(os.path.basename(filename))[0] + ".error", 'w') as error_file:
            error_file.write(
                f"There are no segments in range {hex(mod_baseaddress)}-{hex(mod_baseaddress + mod_size)}")
        return

    rva = segs[0].start_file_address
    # Malwares arch
    processor = "x86:LE:32:default"

    # Ghidra initscript
    command_init = ghidra_dir + "support\\analyzeHeadless.bat . " + proj_name + " -import " + \
        os.path.splitext(filename)[0] + \
        " -postscript ghidra_initscript.py -deleteProject"
    subprocess.run(command_init, shell=True, capture_output=True, text=True)

    # Ghidra postscript
    command_post = ghidra_dir + "support\\analyzeHeadless.bat . " + proj_name + " -import " + filename + " -postscript ghidra_postscript.py -deleteProject -processor " + processor + \
        " -loader BinaryLoader -loader-blockName sample -loader-baseAddr " + \
        hex(mod_baseaddress) + " -loader-fileOffset " + \
        hex(rva) + " -loader-length " + hex(mod_size)
    result = subprocess.run(command_post, shell=True,
                            capture_output=True, text=True)
    # Delete all the remaining folders
    reset(proj_name)
    # Write error log if needed
    if result.stderr:
        with open("outputs/" + os.path.splitext(os.path.basename(filename))[0] + ".error", 'w') as error_file:
            error_file.write(command_init + "\n")
            error_file.write(command_post + "\n")
            error_file.write(result.stderr)


# Check if the parameter was provided
if len(sys.argv) < 2:
    print("Parameter filename is missing")
    sys.exit(1)
# If it's a file analyze it
if sys.argv[1][-3:] == "dmp":
    coverage(sys.argv[1])
# If it is a directory take all the possible files
else:
    for dirpath, dirnames, filenames in os.walk(sys.argv[1]):
        for filename in filenames:
            if filename[-3:] == "dmp":
                print(filename)
                coverage(os.path.join(dirpath, filename))
