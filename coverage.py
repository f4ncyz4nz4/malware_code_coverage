import subprocess
from minidump import minidumpfile
import sys
import os

# Check if the parameter was provided
if len(sys.argv) < 2:
    print("Parameter filename is missing")
    sys.exit(1)

# Get the parameter from the command line
filename = sys.argv[1]

# Parse the minidump in order to retrieve its parameters
minidump_file = minidumpfile.MinidumpFile.parse(filename)
mod_baseaddress = minidump_file.modules.modules[0].baseaddress
mod_size = minidump_file.modules.modules[0].size

segs = [seg for seg in minidump_file.memory_segments_64.memory_segments if seg.start_virtual_address >=
        mod_baseaddress and seg.end_virtual_address <= mod_baseaddress+mod_size]

rva = segs[0].start_file_address
# Malwares arch
processor = "x86:LE:32:default"
# ghidra_dir = os.getenv("GHIDRA_INSTALL_DIR")
ghidra_dir = "C:\\Users\\User\\ghidra_10.2.2\\"
# Ghidra prescript
command = ghidra_dir + "support\\analyzeHeadless.bat . CodeCoverage -import " + \
    filename.split(".")[0] + " -postscript ghidra_initscript.py -deleteProject"
# print(command)
subprocess.run(command, shell=True, capture_output=True, text=True)

# Ghidra postscript
command = ghidra_dir + "support\\analyzeHeadless.bat . CodeCoverage -import " + filename + " -postscript ghidra_postscript.py -deleteProject -processor " + \
    processor + " -loader BinaryLoader -loader-blockName sample -loader-baseAddr " + \
    hex(mod_baseaddress)+" -loader-fileOffset " + \
    hex(rva)+" -loader-length "+hex(mod_size)
print(command)
result = subprocess.run(command, shell=True, capture_output=True, text=True)
print(result.stdout)
