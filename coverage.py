from elftools.common.exceptions import ELFError
from elftools.elf.elffile import ELFFile
import pefile
import subprocess
from minidump import minidumpfile
import sys

# Check if the parameter was provided
if len(sys.argv) < 2:
    print("Parameter filename is missing")
    sys.exit(1)

# Get the parameter from the command line
filename = sys.argv[1]

minidump_file = minidumpfile.MinidumpFile.parse(filename)
mod_baseaddress = minidump_file.modules.modules[0].baseaddress
mod_size = minidump_file.modules.modules[0].size

segs = [seg for seg in minidump_file.memory_segments_64.memory_segments if seg.start_virtual_address >=
        mod_baseaddress and seg.end_virtual_address <= mod_baseaddress+mod_size]

rva = segs[0].start_file_address

command = "/opt/ghidra_10.2.2/support/analyzeHeadless . CodeCoverage -import " + filename.split(".")[0] + \
    " -scriptPath /home/ippo/Desktop/malware_code_coverage_project/malware_code_coverage/ -postscript ghidra_prescript.py -deleteProject"
subprocess.run(command, shell=True, capture_output=True, text=True)
print(command)

command = "/opt/ghidra_10.2.2/support/analyzeHeadless . CodeCoverage -import "+filename + \
    " -scriptPath /home/ippo/Desktop/malware_code_coverage_project/malware_code_coverage/ -postscript ghidra_postscript.py -deleteProject -processor x86:LE:32:default -loader BinaryLoader -loader-blockName sample -loader-baseAddr " + \
    hex(mod_baseaddress)+" -loader-fileOffset " + \
    hex(rva)+" -loader-length "+hex(mod_size)
print(command)
result = subprocess.run(command, shell=True, capture_output=True, text=True)
print(result.stdout)

'''
file = open(
    "1d713ad7ee3a43432d6188707943ee9ef07241bbc7bda376a068989d7a248143.dmp", "rb")
# file.seek(rva)
file_content = file.read(mod_size)

# Create a PE object by passing the file content to the pefile.PE constructor
try:
    pe = pefile.PE(data=file_content)
    machine = pe.FILE_HEADER.Machine
    architecture = pefile.MACHINE_TYPE[machine]
    print(architecture)
    pe.close()
except pefile.PEFormatError:
    print("Not a valid PE file.")
try:
    elf = ELFFile(file)
    print(elf.get_machine_arch())
except ELFError:
    print("Not a valid ELF file.")
'''
