import subprocess
from minidump import minidumpfile
import sys
import os

# Check if the parameter was provided
if len(sys.argv) < 2:
    print("Parameter filename is missing")
    sys.exit(1)
# Check if GHIDRA_INSTALL_DIR env var exists
ghidra_dir = os.getenv("GHIDRA_INSTALL_DIR")
if ghidra_dir == None:
    print("GHIDRA_INSTALL_DIR doesn't exists")
    sys.exit(1)
if ghidra_dir[-1] != "\\":
    ghidra_dir = ghidra_dir + "\\"

# Get the parameter from the command line
filename = sys.argv[1]

# Eventally get the absolute path
filename = os.path.abspath(os.path.join(os.getcwd(), filename))

# Parse the minidump in order to retrieve its parameters
minidump_file = minidumpfile.MinidumpFile.parse(filename)
mod_baseaddress = minidump_file.modules.modules[0].baseaddress
mod_size = minidump_file.modules.modules[0].size

segs = [seg for seg in minidump_file.memory_segments_64.memory_segments if seg.start_virtual_address >=
        mod_baseaddress and seg.end_virtual_address <= mod_baseaddress+mod_size]

rva = segs[0].start_file_address
# Malwares arch
processor = "x86:LE:32:default"

# Ghidra initscript
command = ghidra_dir + "support\\analyzeHeadless.bat . CodeCoverage -import " + \
    os.path.splitext(filename)[0] + \
    " -postscript ghidra_initscript.py -deleteProject"
# print(command)
subprocess.run(command, shell=True, capture_output=True, text=True)

# Ghidra postscript
command = ghidra_dir + "support\\analyzeHeadless.bat . CodeCoverage -import " + filename + " -postscript ghidra_postscript.py -deleteProject -processor " + processor + \
    " -loader BinaryLoader -loader-blockName sample -loader-baseAddr " + \
    hex(mod_baseaddress) + " -loader-fileOffset " + \
    hex(rva) + " -loader-length " + hex(mod_size)
# print(command)
result = subprocess.run(command, shell=True, capture_output=True, text=True)
if result.stderr:
    if not os.path.exists("outputs/"):
        os.makedirs("outputs/")
    with open("outputs/" + os.path.splitext(os.path.basename(filename))[0] + ".error", 'w') as error_file:
        error_file.write(result.stderr)
print(result.stdout)
