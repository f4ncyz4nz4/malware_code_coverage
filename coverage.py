import subprocess
from minidump import minidumpfile
import sys

# Check if the parameter was provided
if len(sys.argv) < 2:
    print("Parameter filename is missing")
    sys.exit(1)

# Get the parameter from the command line
filename = sys.argv[1]

# Parse the minidump in order to retrieve its parameters
minidump_file = minidumpfile.MinidumpFile.parse(filename)
mod_baseaddress = minidump_file.modules.modules[0].baseaddress
mod_size = minidump_file.modules.modules[0].size

segs = [seg for seg in minidump_file.memory_segments_64.memory_segments if seg.start_virtual_address >=
        mod_baseaddress and seg.end_virtual_address <= mod_baseaddress+mod_size]

rva = segs[0].start_file_address
# Malwares arch
processor = "x86:LE:32:default"

# Ghidra prescript
command = "/opt/ghidra_10.2.2/support/analyzeHeadless . CodeCoverage -import " + filename.split(".")[0] + \
    " -scriptPath /home/ippo/Desktop/malware_code_coverage_project/malware_code_coverage/ -postscript ghidra_prescript.py -deleteProject"
# print(command)
subprocess.run(command, shell=True, capture_output=True, text=True)

# Ghidra postscript
command = "/opt/ghidra_10.2.2/support/analyzeHeadless . CodeCoverage -import "+filename + \
    " -scriptPath /home/ippo/Desktop/malware_code_coverage_project/malware_code_coverage/ -postscript ghidra_postscript.py -deleteProject -processor " + processor + " -loader BinaryLoader -loader-blockName sample -loader-baseAddr " + \
    hex(mod_baseaddress)+" -loader-fileOffset " + \
    hex(rva)+" -loader-length "+hex(mod_size)
# print(command)
result = subprocess.run(command, shell=True, capture_output=True, text=True)
# print(result.stdout)
