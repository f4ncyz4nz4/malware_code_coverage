import pefile
import subprocess
import pickle
import networkx as nx
import re
from ghidra.program.model.block import BasicBlockModel


def bytesToAddr(bytes):
    b_list = []
    for byte in bytes:
        if byte < 0:
            byte = 0x100 + int(hex(byte), 16)
        b_list.insert(0, byte)
    hex_address = "0x" + "".join(format(b, '02x') for b in b_list)
    return hex_address


def functionsDict():
    # Create function dictionary
    dict = {}
    for addr in addr_to_visit:
        addr = toAddr(addr)
        func = getFunctionContaining(addr)
        if func == None:
            func = createFunction(addr, "FUN_"+addr.toString())
        if func != None:
            dict[func.toString()] = (0, 0)
    return dict


def getSections():
    '''
    Define all the sections in a pe file
    '''
    sections = {}
    pe = pefile.PE(currentProgram.getName().split(".")[0])
    for sec in pe.sections:
        sections[sec.Name.decode()] = [sec.VirtualAddress+currentProgram.getMinAddress(
        ).getOffset(), sec.SizeOfRawData, sec.__dict__['IMAGE_SCN_MEM_EXECUTE']]
    pe.close()
    return sections


def checkIndirectBlocks(bb_addr):
    inst = getInstructionAt(bb_addr)
    ext_in_bb = []
    while True:
        # Continue for all the basic block
        if inst == None or bbm.getFirstCodeBlockContaining(inst.getInstructionContext().getAddress(),
                                                           monitor).getFirstStartAddress() != bb_addr:
            break
        matches = re.findall(r'0x\w{1,8}', inst.toString())
        if len(matches) > 0:
            addr = toAddr(matches[0])
            if addr.getOffset() > currentProgram.getMinAddress().getOffset() and addr.getOffset() < currentProgram.getMaxAddress().getOffset():
                match = re.match(r'CALL .*\[(0x.{1,8})\]', inst.toString())
                if match:
                    # Indirect address
                    hex_address = bytesToAddr(getBytes(addr, 4))
                    addr_to_visit.insert(0, toAddr(hex_address).getOffset())

                    if match.group(1)[2:] in externals:
                        ext_in_bb.append(externals[match.group(1)[2:]])
                else:
                    # Direct address
                    addr_to_visit.insert(0, addr.getOffset())
        inst = inst.getNext()
    if ext_in_bb:
        ext_cover[bb_addr.toString()] = ext_in_bb


def bb_coverage():
    '''
    Compute the coverage for the executable addresses
    '''
    for s in sections.values():
        if s[2] == True:
            sec_start = s[0]
            sec_end = s[0]+s[1]
            sec_size = s[1]
            break
    if sec_start == None:
        print("ERRRORRRR")
        exit(-1)

    used_addresses = set()
    coverage = 0.0
    for node in G.nodes():
        bb = bbm.getCodeBlockAt(toAddr(int(node, 16)), monitor)
        if bb != None:
            start = max(bb.getMinAddress().getOffset(), sec_start)
            end = min(bb.getMaxAddress().getOffset(), sec_end)
            if end > start:
                slot = (end - start)
                # Check if any address within the range is already used
                for address in range(start, end):
                    if address in used_addresses:
                        slot -= 1
                # Update the used addresses
                coverage += slot / sec_size
                for addr in range(start, end):
                    used_addresses.add(addr)
    print(
        f"Coverage:\t{coverage:.4f}\n", file=stats)


def bb_executed(file):
    '''
    Compute the executed bbs based on the trace file (.bbl) and print the non visited ones
    '''
    bbl_string = open(file).read()
    bbl_list = re.findall('.{1,8}', bbl_string)
    not_seen = set()
    for addr in bbl_list:
        bb = bbm.getFirstCodeBlockContaining(toAddr(addr), monitor)
        if bb != None:
            if G.has_node(bb.getFirstStartAddress().toString()):
                bb_exe.add(bb.getFirstStartAddress().toString())
            elif bb.getFirstStartAddress().toString() != "00000000":
                not_seen.add(bb.getFirstStartAddress().toString())
    if len(not_seen) > 0:
        print("The following bb are not visited:", file=stats)
        for string in not_seen:
            print("\t[*] {} ".format(string), file=stats)
    return len(bb_exe)


def bb_functions():
    # Count bb disassembled
    for node in G.nodes():
        # Take functions existent
        f = getFunctionContaining(toAddr(node))
        if f == None:
            # Or create them
            f = createFunction(addr, "FUN_"+addr.toString())
        if f != None and f.toString() in function_dict:
            value = function_dict[f.toString()]
            function_dict[f.toString()] = (value[0], value[1] + 1)
            if node in ext_cover:
                value = api_dict[f.toString()]
                api_dict[f.toString()] = (value[0], value[1] + 1)
    # Count bb executed
    for bb in bb_exe:
        f = getFunctionContaining(toAddr(bb))
        if f == None:
            f = createFunction(addr, "FUN_"+addr.toString())
        if f != None and f.toString() in function_dict:
            value = function_dict[f.toString()]
            function_dict[f.toString()] = (value[0] + 1, value[1])
            if bb in ext_cover:
                value = api_dict[f.toString()]
                api_dict[f.toString()] = (value[0] + 1, value[1])
    print("Function_name\texe_bb-tot_bb  exe_api-tot_api", file=stats)
    for (key1, value1), (key2, value2) in zip(function_dict.items(), api_dict.items()):
        print(key1+"\t" + str(value1[0]) + "-" + str(value1[1]) +
              "  " + str(value2[0]) + "-" + str(value2[1]), file=stats)


def basic_block(address):
    bb = bbm.getCodeBlockAt(address, monitor)
    if bb != None:
        G.add_node(bb.getFirstStartAddress().toString(), color="blue")
        # check if there are other posible functions not called directly
        checkIndirectBlocks(bb.getFirstStartAddress())
        dests = bb.getDestinations(monitor)
        while (dests.hasNext()):
            dbb = dests.next()
            # add adresses to the list
            if dbb != None:
                addr_to_visit.insert(0, dbb.getReference().getOffset())
                # Create the node for the basic block and link
                G.add_node(dbb.getReference().toString(), color="blue")
                # print("\t[*] {} -> {}".format(bb.getFirstStartAddress(),
                #                               dbb.getReference()), file=log)
                G.add_edge(bb.getFirstStartAddress().toString(),
                           dbb.getReference().toString(), color="black")


def main():
    while len(addr_to_visit) > 0:
        addr = addr_to_visit.pop()
        if not addr in addr_visited:
            basic_block(toAddr(addr))
            addr_visited.append(addr)
    # Export the graph
    with open('graph.pickle', 'wb') as file:
        pickle.dump(G, file)
    # Stats
    num_node = G.number_of_nodes()
    num_edge = G.number_of_edges()
    print("STATS:\n", file=stats)
    print("Number of nodes:\t{}".format(num_node), file=stats)
    print("Number of edges:\t{}\n".format(num_edge), file=stats)
    bb_coverage()
    num_exec = bb_executed(str(getProgramFile())[:-3]+"bbl")
    print(
        f"Execution ratio:\t{(num_exec / num_node):.4f}\t(bb executed:{num_exec})\n", file=stats)
    bb_functions()


# Starts execution here
if __name__ == "__main__":
    print("Start")

    G = nx.Graph()
    monitor = getMonitor()
    bbm = BasicBlockModel(currentProgram)
    addr_to_visit = []
    addr_visited = [0x000000]
    # Nucleus
    command = "nucleus/nucleus -t dmp -a x86 -l 32 -e " + \
        str(getProgramFile()) + " -d linear -f"
    result = subprocess.run(command, shell=True,
                            capture_output=True, text=True)
    for entry in result.stdout.splitlines():
        address = re.findall('0x.{16}', entry)
        addr = toAddr(''.join(address))
        addr_to_visit.append(addr.getOffset())
    # Set for executed bbs
    bb_exe = set()
    # External function dictionary
    try:
        with open("externals.pickle", "rb") as file:
            externals = pickle.load(file)
    except:
        print("->\tfile .pickle not found")
    ext_cover = {}
    # Get section
    sections = getSections()
    # Function and API dicts
    function_dict = functionsDict()
    api_dict = functionsDict()
    # log = open("log.txt", "w")
    stats = open(
        "stats/" + (currentProgram.getName().split(".")[0]) + ".stats", "w")
    main()
    stats.close()
    # log.close()

    print("End")

# opt/ghidra_10.2.2/support/analyzeHeadless . CodeCoverage -import /home/ippo/Desktop/malware_code_coverage_project/malware_code_coverage/1d713ad7ee3a43432d6188707943ee9ef07241bbc7bda376a068989d7a248143.dmp -scriptPath /home/ippo/Desktop/malware_code_coverage_project/malware_code_coverage/ -postscript ghidra_postscript.py -deleteProject -processor x86:LE:32:default -loader BinaryLoader -loader-blockName sample -loader-baseAddr 401000 -loader-fileOffset 0x6101d -loader-length 0x9000
