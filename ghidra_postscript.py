import pickle
import networkx as nx
import re
from ghidra.util.task import ConsoleTaskMonitor
from ghidra.program.model.block import BasicBlockModel


def isFunction(address):
    inst = getInstructionAt(address)
    match = re.match(r'CALL 0x.{1,8}', inst.toString())
    if match != None:
        return True
    else:
        return False


def newFunction(address):
    name = "FUN_" + address.toString()
    f = createFunction(address, name)
    if f != None and (f.getBody().getMaxAddress() > f.getBody().getMinAddress()):
        func_list.append(address.getOffset())
        print("{} has been created".format(name), file=log)


def checkForFunctions(bb_addr):
    inst = getInstructionAt(bb_addr)
    while True:
        if bbm.getFirstCodeBlockContaining(inst.getInstructionContext().getAddress(), monitor).getFirstStartAddress() != bb_addr:
            break
        matches = re.findall(r'0x\w{4,8}', inst.toString())
        if len(matches) > 0:
            newFunction(toAddr(matches[0]))
        inst = inst.getNext()


def color_executed(file):
    bbl_string = open(file).read()
    bbl_list = re.findall('.{1,8}', bbl_string)
    bbs = set()
    not_seen = set()
    for addr in bbl_list:
        bb = bbm.getFirstCodeBlockContaining(toAddr(addr), monitor)
        if bb != None:
            if G.has_node(bb.getFirstStartAddress().toString()):
                bbs.add(bb.getFirstStartAddress().toString())
            elif bb.getFirstStartAddress().toString() != "00000000":
                not_seen.add(bb.getFirstStartAddress().toString())
    if len(not_seen) > 0:
        print("The following bb are not visited:")
        for string in not_seen:
            print("\t[*] {} ".format(string))
    return len(bbs)


def basic_blocks(address):
    '''disassemble given program.
    Args:
        program (ghidra.program.model.listing.Program): program to be disassembled
    Returns:
        string: all disassembled functions
    '''
    f = getFunctionAt(address)
    print("\t--- FUN_{} ".format(f.getEntryPoint()), file=log)
    blocks = bbm.getCodeBlocksContaining(f.getBody(), monitor)

    while (blocks.hasNext()):
        bb = blocks.next()
        G.add_node(bb.getFirstStartAddress().toString(), color="blue")
        # checkForFunctions(bb.getFirstStartAddress())
        dests = bb.getDestinations(monitor)
        while (dests.hasNext()):
            dbb = dests.next()
            if isFunction(dbb.getReferent()):
                # Create the function and add to the list
                newFunction(dbb.getReference())
            else:
                # Create the node for the basic block and link
                G.add_node(dbb.getReference().toString(), color="blue")
                print("\t[*] {} -> {}".format(bb.getFirstStartAddress(),
                      dbb.getReference()), file=log)
                G.add_edge(bb.getFirstStartAddress().toString(),
                           dbb.getReference().toString(), color="black")


def main():
    while len(func_list) > 0:
        addr = func_list.pop()
        basic_blocks(toAddr(addr))
    num_node = G.number_of_nodes()
    num_edge = G.number_of_edges()
    num_exec = color_executed(
        "1d713ad7ee3a43432d6188707943ee9ef07241bbc7bda376a068989d7a248143.bbl")
    with open('graph.pickle', 'wb') as file:
        pickle.dump(G, file)
    print("Number of nodes:\t{}".format(num_node))
    print("Number of edges:\t{}".format(num_edge))
    print("Execution ratio:\t{}".format(num_exec/num_node))


# Starts execution here
if __name__ == "__main__":
    print("Start")

    G = nx.Graph()
    monitor = ConsoleTaskMonitor()
    bbm = BasicBlockModel(currentProgram)
    func_list = []
    func_list.append(0x401070)
    log = open("log.txt", "w")
    main()
    log.close()

    print("End")

# /opt/ghidra_10.2.2/support/analyzeHeadless /home/ippo/Desktop CodeCoverage -import /home/ippo/Desktop/malware_code_coverage_project/malware_code_coverage/1d713ad7ee3a43432d6188707943ee9ef07241bbc7bda376a068989d7a248143.dmp -scriptPath /home/ippo/Desktop/malware_code_coverage_project/malware_code_coverage/ -prescript ghidra_prescript.py -postscript ghidra_postscript.py -deleteProject

# networkx
# ghidra headless
# picke.dump

# .text 00401000 00403fff 0x3000 true(R) false(W) true(X)
