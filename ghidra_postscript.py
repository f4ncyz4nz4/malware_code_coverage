import pickle
import networkx as nx
import re
from ghidra.util.task import ConsoleTaskMonitor
from ghidra.program.model.block import BasicBlockModel


def isFunction(address, target):
    inst = getInstructionAt(address)
    if re.match(r'CALL 0x.{1,8}', inst.toString()):
        name = "FUN_" + target.toString()
        createFunction(target, name)
        func_list.append(target.getOffset())
        # print("{} is a funct".format(name))
        return True
    return False


def basic_blocks(address):
    '''disassemble given program.
    Args:
        program (ghidra.program.model.listing.Program): program to be disassembled
    Returns:
        string: all disassembled functions
    '''
    f = getFunctionAt(address)
    # print("\t[*] FUN_{} ".format(f.getEntryPoint()))
    blocks = bbm.getCodeBlocksContaining(f.getBody(), monitor)

    while (blocks.hasNext()):
        bb = blocks.next()
        G.add_node(bb.getFirstStartAddress().toString())
        dests = bb.getDestinations(monitor)
        while (dests.hasNext()):
            dbb = dests.next()
            if isFunction(dbb.getReferent(), dbb.getReference()) == False:
                G.add_node(dbb.getReference().toString())
                # print("\t[*] {} -> {}".format(bb.getFirstStartAddress(), dbb.getReference()))
                G.add_edge(bb.getFirstStartAddress().toString(),
                           dbb.getReference().toString())


def main():
    while len(func_list) > 0:
        addr = func_list.pop()
        basic_blocks(toAddr(addr))
    print("Number of nodes:\t{}".format(G.number_of_nodes()))
    print("Number of edges:\t{}".format(G.number_of_edges()))
    with open('graph.pickle', 'wb') as file:
        pickle.dump(G, file)


# Starts execution here
if __name__ == "__main__":
    print("Start")

    G = nx.Graph()
    monitor = ConsoleTaskMonitor()
    bbm = BasicBlockModel(currentProgram)
    func_list = []
    func_list.append(0x401070)
    main()

    print("End")

# /opt/ghidra_10.2.2/support/analyzeHeadless /home/ippo/Desktop CodeCoverage -import /home/ippo/Desktop/malware_code_coverage_project/malware_code_coverage/1d713ad7ee3a43432d6188707943ee9ef07241bbc7bda376a068989d7a248143.dmp -scriptPath /home/ippo/Desktop/malware_code_coverage_project/malware_code_coverage/ -prescript ghidra_prescript.py -postscript ghidra_postscript.py -deleteProject

# networkx
# ghidra headless
# picke.dump
