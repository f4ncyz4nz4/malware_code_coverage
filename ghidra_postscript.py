import pickle
import networkx as nx
import re
from ghidra.util.task import ConsoleTaskMonitor
from ghidra.program.model.block import BasicBlockModel


def bytesToAddr(bytes):
    b_list = []
    for byte in bytes:
        if byte < 0:
            byte = 0x100+int(hex(byte), 16)
        b_list.insert(0, byte)
    hex_address = "0x"+"".join(format(b, '02x') for b in b_list)
    return hex_address


def checkForFunctions(bb_addr):
    inst = getInstructionAt(bb_addr)
    while True:
        if inst == None or bbm.getFirstCodeBlockContaining(inst.getInstructionContext().getAddress(), monitor).getFirstStartAddress() != bb_addr:
            break
        matches = re.findall(r'0x\w{1,8}', inst.toString())
        if len(matches) > 0:
            addr = toAddr(matches[0])
            # .text segment
            if addr.getOffset() > 0x401000 and addr.getOffset() < 0x403fff:
                addr_to_visit.insert(0, addr.getOffset())
            # .data segment
            if addr.getOffset() > 0x405000 and addr.getOffset() < 0x406fff:
                if re.match(r'CALL .*\[0x.{1,8}\]', inst.toString()):
                    hex_address = bytesToAddr(getBytes(addr, 4))
                    addr_to_visit.insert(0, toAddr(hex_address).getOffset())
        inst = inst.getNext()


def color_executed(file):
    bbl_string = open(file).read()
    bbl_list = re.findall('.{1,8}', bbl_string)
    bbs = set()
    not_seen = set()
    for addr in bbl_list:
        bb = bbm.getFirstCodeBlockContaining(toAddr(addr), monitor)
        if bb != None:
            if G.has_node(bb.getFirstStartAddress().toString()):
                bbs.add(bb.getFirstStartAddress().toString())
            elif bb.getFirstStartAddress().toString() != "00000000":
                not_seen.add(bb.getFirstStartAddress().toString())
    if len(not_seen) > 0:
        print("The following bb are not visited:")
        for string in not_seen:
            print("\t[*] {} ".format(string))
    return len(bbs)


def coverage(graph):
    used_addresses = set()
    coverage = 0.0
    for node in graph.nodes():
        bb = bbm.getCodeBlockAt(toAddr(int(node, 16)), monitor)
        start = max(bb.getMinAddress().getOffset(), 0x401000)
        end = min(bb.getMaxAddress().getOffset(), 0x403fff)
        if end > start:
            slot = (end - start)
            # Check if any address within the range is already used
            for address in range(start, end):
                if address in used_addresses:
                    slot -= 1
            # Update the used addresses
            coverage += slot/0x3000
            for addr in range(start, end):
                used_addresses.add(addr)
    return coverage


def basic_block(address):
    '''find all the basic blocks given an address.
    Args:
        address (ghidra.program.model.listing.Program): address to search
    '''
    bb = bbm.getCodeBlockAt(address, monitor)
    if bb != None:
        G.add_node(bb.getFirstStartAddress().toString(), color="blue")
        # check if there are other posible functions not called directly
        checkForFunctions(bb.getFirstStartAddress())
        dests = bb.getDestinations(monitor)
        while (dests.hasNext()):
            dbb = dests.next()
            # add adresses to the list
            if dbb.getReference().getOffset() >= 0x401000 and dbb.getReference().getOffset() <= 0x403fff:
                addr_to_visit.insert(0, dbb.getReference().getOffset())
                # Create the node for the basic block and link
                G.add_node(dbb.getReference().toString(), color="blue")
                print("\t[*] {} -> {}".format(bb.getFirstStartAddress(),
                                              dbb.getReference()), file=log)
                G.add_edge(bb.getFirstStartAddress().toString(),
                           dbb.getReference().toString(), color="black")
    else:
        print("-->can NOT create bb {}".format(address.toString()))


def main():
    while len(addr_to_visit) > 0:
        addr = addr_to_visit.pop()
        if not addr in addr_visited:
            basic_block(toAddr(addr))
            addr_visited.append(addr)
    num_node = G.number_of_nodes()
    num_edge = G.number_of_edges()
    num_exec = color_executed(
        "1d713ad7ee3a43432d6188707943ee9ef07241bbc7bda376a068989d7a248143.bbl")
    total_coverage = coverage(G)
    with open('graph.pickle', 'wb') as file:
        pickle.dump(G, file)
    print("Number of nodes:\t{}".format(num_node))
    print("Number of edges:\t{}".format(num_edge))
    print("Execution ratio:\t{}".format(num_exec/num_node))
    print(
        f"The coverage of the range 0x401000 to 0x403fff is: {100*total_coverage:.2f}%")


# Starts execution here
if __name__ == "__main__":
    print("Start")

    G = nx.Graph()
    monitor = ConsoleTaskMonitor()
    bbm = BasicBlockModel(currentProgram)
    addr_to_visit = [0x401070]
    addr_visited = [0x000000]
    log = open("log.txt", "w")
    main()
    log.close()
    # n = open("nodes.txt", "w")
    # for no in G.nodes():
    #    print(no, file=n)
    # n.close()
    # all_f = open("all_bbs.txt").readlines()
    # for line in all_f:
    #    if toAddr(line).getOffset() > 0x401000 and toAddr(line).getOffset() < 0x403fff:
    #        if not G.has_node(toAddr(line).toString()):
    #            print("MISSING-> "+toAddr(line).toString())

    print("End")

# /opt/ghidra_10.2.2/support/analyzeHeadless /home/ippo/Desktop CodeCoverage -import /home/ippo/Desktop/malware_code_coverage_project/malware_code_coverage/1d713ad7ee3a43432d6188707943ee9ef07241bbc7bda376a068989d7a248143.dmp -scriptPath /home/ippo/Desktop/malware_code_coverage_project/malware_code_coverage/ -prescript ghidra_prescript.py -postscript ghidra_postscript.py -deleteProject

# networkx
# ghidra headless
# picke.dump

# .text 00401000 00403fff 0x3000 true(R) false(W) true(X)
